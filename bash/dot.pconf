#!/usr/local/bin/bash
#
# Custom 256 color Pureline config
#

#
# COLORS
#

# Colors must be defined in pairs of FG & BG
PL_COLORS[MyOrange]='\[\e[38;5;130m\]'
PL_COLORS[On_MyOrange]='\[\e[48;5;130m\]'

PL_COLORS[MyLime]='\[\e[38;5;148m\]'
PL_COLORS[On_MyLime]='\[\e[48;5;148m\]'

PL_COLORS[MyYellow]='\[\e[38;5;227m\]'
PL_COLORS[On_MyYellow]='\[\e[48;5;227m\]'

PL_COLORS[MyLightGrey]='\[\e[38;5;250m\]'
PL_COLORS[On_MyLightGrey]='\[\e[48;5;250m\]'

PL_COLORS[MyBlue]='\[\e[38;5;69m\]'
PL_COLORS[On_MyBlue]='\[\e[48;5;69m\]'

PL_COLORS[MyRed]='\[\e[38;5;196m\]'
PL_COLORS[On_MyRed]='\[\e[48;5;196m\]'

PL_COLORS[MyDarkGrey]='\[\e[38;5;240m\]'
PL_COLORS[On_MyDarkGrey]='\[\e[48;5;240m\]'

PL_COLORS[MyPurple]='\[\e[38;5;89m\]'
PL_COLORS[On_MyPurple]='\[\e[48;5;89m\]'

PL_COLORS[MyGreen]='\[\e[38;5;83m\]'
PL_COLORS[On_MyGreen]='\[\e[48;5;83m\]'

PL_COLORS[MyDarkRed]='\[\e[38;5;1m\]'
PL_COLORS[On_MyDarkRed]='\[\e[48;5;1m\]'

PL_COLORS[MyTeal]='\[\e[38;5;31m\]'
PL_COLORS[On_MyTeal]='\[\e[48;5;31m\]'

PL_COLORS[MyVLGrey]='\[\e[38;5;250m\]'
PL_COLORS[On_MyVLGrey]='\[\e[48;5;250m\]'

PL_COLORS[MyMagenta]='\[\e[38;5;161m\]'
PL_COLORS[On_MyMagenta]='\[\e[48;5;161m\]'

PL_COLORS[MyWhite]='\[\e[38;5;255m\]'
PL_COLORS[On_MyWhite]='\[\e[48;5;255m\]'

PL_COLORS[MyVDGrey]='\[\e[38;5;238m\]'
PL_COLORS[On_MyVDGrey]='\[\e[48;5;238m\]'

PL_COLORS[MyVDRed]='\[\e[38;5;52m\]'
PL_COLORS[On_MyVDRed]='\[\e[48;5;52m\]'

PL_COLORS[MyVDBlue]='\[\e[38;5;20m\]'
PL_COLORS[On_MyVDBlue]='\[\e[48;5;20m\]'

PL_COLORS[MyBGColor]='\[\e[38;5;236m\]'
PL_COLORS[On_MyBGColor]='\[\e[48;5;236m\]'

PL_COLORS[MyPBColor]='\[\e[38;5;237m\]'
PL_COLORS[On_MyPBColor]='\[\e[48;5;237m\]'

#
# Modules
#
function host_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local HOSTNAME=$(hostname -s | tr '[:upper:]' '[:lower:]')
    local content="$HOSTNAME" # Set the content to be displayed
    PS1+=$(section_end $fg_color $bg_color)
    PS1+=$(section_content $fg_color $bg_color " $content ")
    __last_color="$bg_color"
}

function mypath_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local bd_fg_color="MyWhite"
    local bd_bg_color="MyTeal"
    local path_separator="  "
    local myhpwd="/"
    local basedir="/"
    local mypwd=$(pwd)

    case $mypwd in
    $HOME)
        myhpwd=""
        basedir="~"
        MATCH="home"
        ;;
    $HOME/*/*/*)
        local myopwd=".../${mypwd#"${mypwd%/*/*}/"}"
        myhpwd=$(echo ${myopwd} | sed "s/\//${path_separator}/g")
        basedir="~"
        MATCH="home + *"
        ;;
    $HOME/*/*)
        local myopwd="${mypwd#"${mypwd%/*/*}/"}"
        myhpwd=$(echo ${myopwd} | sed "s/\//${path_separator}/g")
        basedir="~"
        MATCH="home + 2"
        ;;
    $HOME/*)
        myhpwd="${mypwd##*/}"
        basedir="~"
        MATCH="home + 1"
        ;;
    /*/*/*)
        local myopwd=".../${mypwd#"${mypwd%/*/*}/"}"
        myhpwd=$(echo ${myopwd} | sed "s/\//${path_separator}/g")
        MATCH="three-deep"
        ;;
    /*/*)
        local myopwd="${mypwd#"${mypwd%/*/*}/"}"
        myhpwd=$(echo ${myopwd} | sed "s/\//${path_separator}/g")
        MATCH="two-deep"
        ;;
    *)
        local myopwd="$mypwd"
        #myhpwd=$(echo ${myopwd} | awk '{print $2}' | sed "s/\//${path_separator}/g")
        if [ "$myopwd" = $"basedir" ]; then
            myhpwd="${basedir}"
        elif [ "$mypwd" = "/" ]; then
            myhpwd="/"
        else
            myhpwd="$(echo ${myopwd} | tr -d '/')"
        fi
        MATCH="default"
        ;;
    esac

    if [ "$basedir" = "~" ]; then
        PS1+=$(section_end $bd_fg_color $bd_bg_color)
        PS1+=$(section_content $bd_fg_color $bd_bg_color " $basedir ")
        __last_color="$bd_bg_color"
    fi

    if [ -n "$myhpwd" ]; then
        PS1+=$(section_end $fg_color $bg_color)
        PS1+=$(section_content $fg_color $bg_color " $myhpwd ")
        __last_color="$bg_color"
    fi
}

function gittrack_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ -n "$git_branch" ]; then
        local number_untracked="$(git ls-files --other --exclude-standard 2>/dev/null | wc -l | tr -d [:space:])"
        if [ ! "$number_untracked" -eq "0" ]; then
            local content="${number_untracked}+" # Set the content to be displayed
            PS1+=$(section_end $fg_color $bg_color)
            PS1+=$(section_content $fg_color $bg_color " $content ")
            __last_color="$bg_color"
        fi
    fi
}

function gitstash_module() {
    local bg_color="$1"    # Set the background color
    local fg_color="$2"    # Set the foreground color
    local stash_symbol="⚑" # Symbol for stashed files
    local git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ -n "$git_branch" ]; then
        local number_stashed=$(git stash list 2>/dev/null | wc -l | tr -d [:space:])
        if [ ! "$number_stashed" -eq "0" ]; then
            content="${number_stashed}${stash_symbol}" # Set the content to be displayed
            PS1+=$(section_end $fg_color $bg_color)
            PS1+=$(section_content $fg_color $bg_color " $content ")
            __last_color="$bg_color"
        fi
    fi
}

function gitaheadbehind_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local ahead_symbol="⬆"
    local behind_symbol="⬇"
    local git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ -n "$git_branch" ]; then
        local git_remote="$(git remote)"
        if [ -n "$git_remote" ]; then
            local number_behind_ahead="$(git rev-list --count --left-right '@{upstream}...HEAD' 2>/dev/null)"
            local number_ahead="${number_behind_ahead#*	}"
            local number_behind="${number_behind_ahead%	*}"
            local content=""
            if [ ! "$number_behind" -eq "0" ]; then
                content+="${number_behind}${behind_symbol}"
            fi
            if [ ! "$number_ahead" -eq "0" ]; then
                content+="${number_ahead}${ahead_symbol}"
            fi
            if [ -n "$content" ]; then
                PS1+=$(section_end $fg_color $bg_color)
                PS1+=$(section_content $fg_color $bg_color " $content ")
                __last_color="$bg_color"
            fi
        fi
    fi
}

function gitstaged_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local staged_symbol="✔"
    local git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ -n "$git_branch" ]; then
        local number_staged="$(git diff --staged --name-only --diff-filter=AM 2>/dev/null | wc -l | tr -d [:space:])"
        if [ ! "$number_staged" -eq "0" ]; then
            local content="${number_staged}${staged_symbol}"
            PS1+=$(section_end $fg_color $bg_color)
            PS1+=$(section_content $fg_color $bg_color " $content ")
            __last_color="$bg_color"
        fi
    fi
}

function gitmodified_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local modified_symbol="✎"
    local git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ -n "$git_branch" ]; then
        local number_modified="$(git diff --name-only --diff-filter=M 2>/dev/null | wc -l | tr -d [:space:])"
        if [ ! "$number_modified" -eq "0" ]; then
            local content="${number_modified}${modified_symbol}"
            PS1+=$(section_end $fg_color $bg_color)
            PS1+=$(section_content $fg_color $bg_color " $content ")
            __last_color="$bg_color"
        fi
    fi
}

function myssh_module() {
    if [[ "${SSH_CLIENT}" || "${SSH_TTY}" ]]; then
        local bg_color="$1"
        local fg_color="$2"
        local ssh_symbol="☎"
        local ip_address="$(host $(hostname -s) | cut -f 4 -d ' ')"
        local content="${ssh_symbol}"
        if [ "$PL_SSH_SHOW_HOST" = true ]; then
            if [ "$PL_SSH_USE_IP" = true ]; then
                content+=" ${ip_address}"
            else
                content+=" \h"
            fi
        fi
        PS1+="$(section_end $fg_color $bg_color)"
        PS1+="$(section_content $fg_color $bg_color " $content ")"
        __last_color="$bg_color"
    fi
}

#
# Enabled modules Uncomment/comment to enable/disable a module
#
declare -a PL_MODULES=(
    # Module                Background  Foreground
    'user_module            MyDarkGrey  MyVLGrey'
    'host_module            MyVDGrey    MyLightGrey'
    'myssh_module           MyOrange    MyWhite'
    'mypath_module          MyPBColor   White'
    'virtual_env_module     MyBlue      Black'
    'read_only_module       MyDarkRed   MyWhite'
    'background_jobs_module MyPurple    MyWhite'
    'git_module             MyLime      Black'
    'gitaheadbehind_module  MyDarkGrey  MyVLGrey'
    'gitstash_module        MyVDBlue    MyWhite'
    'gitstaged_module       Green       MyWhite'
    'gitmodified_module     MyOrange    MyWhite'
    'gittrack_module        MyVDRed     MyWhite'
    'return_code_module     MyDarkRed   MyWhite'
    'prompt_module          MyBGColor   MyWhite'
)

# Module Options
PL_PATH_TRIM=2 # 0 Full path, 1, Current, 2+ trim level
PL_TIME_SHOW_SECONDS=true
PL_USER_SHOW_HOST=false
PL_USER_USE_IP=false
PL_SSH_SHOW_HOST=false
PL_SSH_USE_IP=false
PL_GIT_DIRTY_FG=MyWhite
PL_GIT_DIRTY_BG=MyMagenta
PL_GIT_AHEAD=false
PL_GIT_MODIFIED=false
PL_GIT_STAGED=false
PL_GIT_CONFLICTS=true
PL_GIT_UNTRACKED=false
PL_GIT_STASH=false
PL_PROMPT_ROOT_BG=MyDarkRed
PL_PROMPT_ROOT_FG=White

# redefine symbols using powerline glyphs
PL_SYMBOLS[hard_separator]=""
PL_SYMBOLS[soft_separator]=""

PL_SYMBOLS[git_branch]=""
#PL_SYMBOLS[git_untracked]="↔"
PL_SYMBOLS[git_untracked]="+"
PL_SYMBOLS[git_stash]="§"
PL_SYMBOLS[git_ahead]="↑"
PL_SYMBOLS[git_behind]="↓"
PL_SYMBOLS[git_modified]="✎"
PL_SYMBOLS[git_staged]="✔"
PL_SYMBOLS[git_conflicts]="✘ "

PL_SYMBOLS[ssh]=""
PL_SYMBOLS[read_only]="⊘"
PL_SYMBOLS[return_code]="⚑"
PL_SYMBOLS[background_jobs]="⏎"
PL_SYMBOLS[python]="π"

PL_SYMBOLS[battery_charging]="⚡"
PL_SYMBOLS[battery_discharging]="▮"

#
# Other stuff
#
PS2=" ↪ "
export PS2
