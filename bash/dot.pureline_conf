#!/usr/local/bin/bash
# Custom 256 color Pureline config

# Helper functions
function log() {
    local MESSAGE="$1"
    local DATE=$(date "+%d%m%y")
    local LOGFILE=$HOME/.test.log
    echo "${DATE} : ${MESSAGE}" >>$LOGFILE
}

# Modules

function host_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local HOSTNAME=$(hostname -s | tr '[:upper:]' '[:lower:]')
    local content="$HOSTNAME" # Set the content to be displayed
    PS1+=$(section_end $fg_color $bg_color)
    PS1+=$(section_content $fg_color $bg_color " $content ")
    __last_color="$bg_color"
}

function gittrack_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local number_untracked="$(git ls-files --other --exclude-standard 2>/dev/null | wc -l | tr -d [:space:])"
    if [ ! "$number_untracked" -eq "0" ]; then
        local content="${number_untracked}+" # Set the content to be displayed
        PS1+=$(section_end $fg_color $bg_color)
        PS1+=$(section_content $fg_color $bg_color " $content ")
        __last_color="$bg_color"
    fi
}

function gitstash_module() {
    local bg_color="$1"    # Set the background color
    local fg_color="$2"    # Set the foreground color
    local stash_symbol="⚑" # Symbol for stashed files
    local number_stashed=$(git stash list 2>/dev/null | wc -l | tr -d [:space:])
    if [ ! $number_stashed -eq 0 ]; then
        content="${number_stashed}${stash_symbol}" # Set the content to be displayed
        PS1+=$(section_end $fg_color $bg_color)
        PS1+=$(section_content $fg_color $bg_color " $content ")
        __last_color="$bg_color"
    fi
}

function gitahead_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local number_ahead=$(git cherry -v ${upstream} | wc -l | tr -d [:space:])
    local ahead_symbol="↑"
    log "number ahead: ${number_ahead}"
    if [ ! $number_ahead -eq 0 ]; then
        content="${number_ahead}${ahead_symbol}"
        PS1+=$(section_end $fg_color $bg_color)
        PS1+=$(section_content $fg_color $bg_color " $content ")
        __last_color="$bg_color"
    fi
}

function gitbehind_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local number_behind_ahead=$(git rev-list --count --left-right '@{upstream}...HEAD' 2>/dev/null)
    local number_behind="${number_behind_ahead%	*}"
    local behind_symbol="↓"
    if [ ! "$number_behind" -eq 0 ]; then
        #content="${number_behind}${behind_symbol}"
        local content="^"
        PS1+=$(section_end $fg_color $bg_color)
        PS1+=$(section_content $fg_color $bg_color " $content ")
        __last_color="$bg_color"
    fi
}

function gitstaged_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local number_staged="$(git diff --staged --name-only --diff-filter=AM 2>/dev/null | wc -l | tr -d [:space:])"
    local staged_symbol="✔"
    if [ ! "$number_staged" -eq "0" ]; then
        local content="${number_staged}${staged_symbol}"
        PS1+=$(section_end $fg_color $bg_color)
        PS1+=$(section_content $fg_color $bg_color " $content ")
        __last_color="$bg_color"
    fi
}

function gitmodified_module() {
    local bg_color="$1" # Set the background color
    local fg_color="$2" # Set the foreground color
    local number_modified="$(git diff --name-only --diff-filter=M 2>/dev/null | wc -l | tr -d [:space:])"
    local modified_symbol="✎"
    if [ ! "$number_modified" -eq "0" ]; then
        local content="${number_modified}${modified_symbol}"
        PS1+=$(section_end $fg_color $bg_color)
        PS1+=$(section_content $fg_color $bg_color " $content ")
        __last_color="$bg_color"
    fi
}

# Colors must be defined in pairs of FG & BG
PL_COLORS[MyOrange]='\[\e[38;5;130m\]'
PL_COLORS[On_MyOrange]='\[\e[48;5;130m\]'

PL_COLORS[MyLime]='\[\e[38;5;190m\]'
PL_COLORS[On_MyLime]='\[\e[48;5;190m\]'

PL_COLORS[MyYellow]='\[\e[38;5;227m\]'
PL_COLORS[On_MyYellow]='\[\e[48;5;227m\]'

PL_COLORS[MyLightGrey]='\[\e[38;5;250m\]'
PL_COLORS[On_MyLightGrey]='\[\e[48;5;250m\]'

PL_COLORS[MyBlue]='\[\e[38;5;69m\]'
PL_COLORS[On_MyBlue]='\[\e[48;5;69m\]'

PL_COLORS[MyRed]='\[\e[38;5;196m\]'
PL_COLORS[On_MyRed]='\[\e[48;5;196m\]'

PL_COLORS[MyDarkGrey]='\[\e[38;5;240m\]'
PL_COLORS[On_MyDarkGrey]='\[\e[48;5;240m\]'

PL_COLORS[MyPurple]='\[\e[38;5;89m\]'
PL_COLORS[On_MyPurple]='\[\e[48;5;89m\]'

PL_COLORS[MyGreen]='\[\e[38;5;83m\]'
PL_COLORS[On_MyGreen]='\[\e[48;5;83m\]'

PL_COLORS[MyDarkRed]='\[\e[38;5;1m\]'
PL_COLORS[On_MyDarkRed]='\[\e[48;5;1m\]'

PL_COLORS[MyTeal]='\[\e[38;5;31m\]'
PL_COLORS[On_MyTeal]='\[\e[48;5;31m\]'

PL_COLORS[MyVLGrey]='\[\e[38;5;250m\]'
PL_COLORS[On_MyVLGrey]='\[\e[48;5;250m\]'

PL_COLORS[MyMagenta]='\[\e[38;5;161m\]'
PL_COLORS[On_MyMagenta]='\[\e[48;5;161m\]'

PL_COLORS[MyWhite]='\[\e[38;5;250m\]'
PL_COLORS[On_MyWhite]='\[\e[48;5;250m\]'

PL_COLORS[MyVDGrey]='\[\e[38;5;238m\]'
PL_COLORS[On_MyVDGrey]='\[\e[48;5;238m\]'

PL_COLORS[MyVDRed]='\[\e[38;5;52m\]'
PL_COLORS[On_MyVDRed]='\[\e[48;5;52m\]'

PL_COLORS[MyVDBlue]='\[\e[38;5;20m\]'
PL_COLORS[On_MyVDBlue]='\[\e[48;5;20m\]'

PL_COLORS[MyBGColor]='\[\e[38;5;235m\]'
PL_COLORS[On_MyBGColor]='\[\e[48;5;235m\]'

# All modules are enabled. Uncomment/comment to enable/disable a module
declare -a PL_MODULES=(
    # Module                Background  Foreground
    'user_module            MyDarkGrey  MyVLGrey'
    'host_module            MyVDGrey    MyLightGrey'
    'path_module            MyTeal      MyWhite'
    'ssh_module             MyYellow    Black'
    'virtual_env_module     MyBlue      Black'
    'read_only_module       MyRed       White'
    'background_jobs_module MyPurple    White'
    'git_module             MyLime      Black'
    'gitahead_module        MyDarkGrey  MyVLGrey'
    'gitbehind_module       MyDarkGrey  MyVLGrey'
    'gittrack_module        MyVDRed     MyWhite'
    'gitstash_module        MyVDBlue    MyWhite'
    'gitstaged_module       Green       White'
    'gitmodified_module     MyOrange    MyWhite'
    'return_code_module     MyDarkRed   White'
    'prompt_module          MyBGColor  White'
)

# Module Options
PL_PATH_TRIM=2 # 0 Full path, 1, Current, 2+ trim level
PL_TIME_SHOW_SECONDS=true
PL_USER_SHOW_HOST=false
PL_USER_USE_IP=false
PL_SSH_SHOW_HOST=true
PL_SSH_USE_IP=true
PL_GIT_DIRTY_FG=MyWhite
PL_GIT_DIRTY_BG=MyMagenta
PL_GIT_AHEAD=false
PL_GIT_MODIFIED=false
PL_GIT_STAGED=true
PL_GIT_CONFLICTS=true
PL_GIT_UNTRACKED=false
PL_GIT_STASH=false
PL_PROMPT_ROOT_BG=MyDarkRed
PL_PROMPT_ROOT_FG=White

# redefine symbols using powerline glyphs
PL_SYMBOLS[hard_separator]=""
PL_SYMBOLS[soft_separator]=""

PL_SYMBOLS[git_branch]=""
#PL_SYMBOLS[git_untracked]="↔"
PL_SYMBOLS[git_untracked]="+"
PL_SYMBOLS[git_stash]="§"
PL_SYMBOLS[git_ahead]="↑"
PL_SYMBOLS[git_behind]="↓"
PL_SYMBOLS[git_modified]="✎"
PL_SYMBOLS[git_staged]="✔"
PL_SYMBOLS[git_conflicts]="✘ "

PL_SYMBOLS[ssh]=""
PL_SYMBOLS[read_only]=""
PL_SYMBOLS[return_code]="⚑"
PL_SYMBOLS[background_jobs]="⏎"
PL_SYMBOLS[python]="π"

PL_SYMBOLS[battery_charging]="⚡"
PL_SYMBOLS[battery_discharging]="▮"
